Idea:
    Use a byte-based (uint8) instruction stream

Pros:
    - Make it easier to decode variable-length instructions
    - Less bit-shifting

Cons:
    - Need to mask together 16-bit offsets/values
    - How should we write/read multi-byte values?

----------------------------------------------------------------

            0 (a)
registers: [1, ...]

add:
0: cloadi32 @3 #0
1: move     @2 @3
2: cloadi32 @3 #1
3: move     @2 @3
4: addi32   @4 @0 @1
5: addi32   @3 @4 @2
6: return   @3

test:
0: cloadi32 @0 #2
1: cloadi32 @1 #3
2: call     2  @2 @0 @1
3: return   @2

call stack:

1.
+===================+
|        ...        |
+===================+

2.
+===================+
| old_fp            | (of <main>)
|-------------------|
| return address    | (of <main>)
+===================+
| reg 0 (1)         | <-- fp
|-------------------|
| reg 1 (2)         |
|-------------------|
| reg 2             | (return register for test)
|-------------------|
|                   | <-- sp
+===================+

3.
+===================+
| old_fp            | (of <main>)
|-------------------|
| return address    | (of <main>)
+===================+
| reg 0 (1)         |
|-------------------|
| reg 1 (2)         |
|-------------------|
| reg 2             | (return register for test)
+===================+
| old_fp            | (of test = 2)
|-------------------|
| return address    | (of test = 3)
+===================+
| reg 0 (value1)    | <-- fp
|-------------------|
| reg 1 (value2)    |
|-------------------|
| reg 2 (b)         |
|-------------------|
| reg 3             | (return register for add)
|-------------------|
| reg 4 (temp reg)  |
|-------------------|
|                   | <-- sp
+===================+

4.
  a. Set sp to fp so it now points to the first local.
  b. Copy return values into @[fp+0], @[fp+1], ... until they are all copied.
     This is fine since we are done with the current frame at this point
     (TODO: how will this work for tail calls?).
  c. sp now points just past the final return value. It would make sense to
     special-case no and single return values
  d. Restore old fp.

+===================+
| old_fp1           | (of <main>)
|-------------------|
| return address    | (of <main>)
+===================+
| reg 0 (1)         | <-- old_fp2
|-------------------|
| reg 1 (2)         |
|-------------------|
| reg 2             | (return register for test)
+===================+
| old_fp2           | (of test = 2)
|-------------------|
| return address    | (of test = 3)
+===================+
| reg 3             | <-- fp (single return register)
|-------------------|
| reg 1 (value2)    | <-- sp
|-------------------|
| reg 2 (b)         |
|-------------------|
| reg 3             | (return register for add)
|-------------------|
| reg 4 (temp reg)  |
|-------------------|
|                   |
+===================+

5.
  a. The caller can copy each return register into its destination registers 
     in its frame.
  b. Afterwards, jump to return address and resume execution.

+===================+
| old_fp1           | (of <main>)
|-------------------|
| return address    | (of <main>)
+===================+
| reg 0 (1)         | <-- fp
|-------------------|
| reg 1 (2)         |
|-------------------|
| reg 2             | (return register for test)
+===================+
| old_fp2           | (of test = 2)
|-------------------|
| return address    | <-- sp (of test = 3)
+===================+
| reg 3             | <-- fp (destination register for test)
|-------------------|
| reg 1 (value2)    |
|-------------------|
| reg 2 (b)         |
|-------------------|
| reg 3             | (return register for add)
|-------------------|
| reg 4 (temp reg)  |
|-------------------|
|                   |
+===================+


+===================+
| old_fp            |
|-------------------|
| return address    |
+===================+ <-- fp
| local 0 (value1)  | 0
|-------------------|
| local 1 (value2)  | 1
|-------------------|
| reg 0 (b)         | 2
|-------------------|
| reg 1 (0)         | 3
|-------------------|
| reg 2 (temp)      | 4
+===================+ <-- sp

cloadi32 @3 #0
move     @2 @3
addi32   @4 @0 @1
addi32   @3 @4 @2
return   @3

----------------------------------------------------------------

Have a fixed length call instruction of 32 bits. Return values are simply left
on the callee's register window or moved down to the beginning of the callee's
register window. The latter approach is supposedly what the Scheme interpreter
Guile does. Any remaining part of the callee's register window is cleaned up.
The caller knows how many values were returned by computing the difference
between the top of the stack (just beyond the last return value) and the
absolute position of the caller's register window. The caller then uses these
registers for referencing values returned by the function, essentially making
the callee extend the register window of the caller with its own registers.

If the caller used register rA for variable A and A is assigned to by the return
value of a function call, the new register (let's call it rB) will then be used
to refer to A. Unfortunately, register allocation won't help us here but any
registers marked as dead after the function call can be reused. This doesn't
happen in lua since there is no register allocation as far as I know.

This strategy makes sense if you think about it as being in SSA form where
variables are never assigned twice.

We could maybe also specialise for a single return value.
